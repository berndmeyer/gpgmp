#summary Tutorial for using Inchman, the online user interface to GPGMP.

= Introduction =
Inchman provides a convenient and simple way to run existing reaction-diffusion models on an GPGMP implementation without having to download and compile the source code. Users can define their reaction networks in [http://sbml.org/Main_Page SBML] and upload it to Inchman. The geometry specifications and simulation parameters are defined through the web interface. The whole model can then be submitted to our GPU cluster and, upon successful execution, a summary of the results will be mailed to the user.

= Running a simple example model =
The first step is to define the reaction network in a valid [http://sbml.org SBML] file. For the purpose of this tutorial, a simple model consisting of two species _A_ and _B_ and an annihilation reaction

<wiki:gadget url="http://mathml-gadget.googlecode.com/svn/trunk/mathml-gadget.xml" border="0" up_content="A + B -> \emptyset"/>

is sufficient. The corresponding SBML file, which is listed below, is part of the [http://code.google.com/p/gpgmp/downloads/list Inchman example package].

{{{
<?xml version="1.0" encoding="utf-8"?>
<!--
   Simple 2d annihilation model with two species (corresponding to annihilation.xml in MesoRD)
-->
<sbml xmlns="http://www.sbml.org/sbml/level2/version3" level="2" version="the simulation3">

  <model name="Simple Annihilation">
    <listOfCompartments>
      <compartment id="World"/>
    </listOfCompartments>

    <listOfSpecies>
      <species id="A" name="Species A"  initialAmount="0" compartment="World"/>
      <species id="B" name="Species B"  initialAmount="0" compartment="World"/>
    </listOfSpecies>

    <listOfParameters>
      <parameter id="k"  value="150.79"/>
    </listOfParameters>

    <listOfReactions>
      <reaction id="Annihilation">
        <listOfReactants>
          <speciesReference species="A"/>
          <speciesReference species="B"/>
        </listOfReactants>
        <kineticLaw>
          <math xmlns="http://www.w3.org/1998/Math/MathML">
            <apply>
              <times/>
              <ci> k </ci>
              <ci> A </ci>
              <ci> B </ci>
            </apply>
          </math>
        </kineticLaw>
      </reaction>
    </listOfReactions>
  </model>
</sbml>
}}}
Note that the `species` attributes `initialAmount` and `compartment` are only present to guarantee compliance with the SBML specification and will be ignored by Inchman. In fact, the geometry of the compartments and the initial amounts of the species will be specified at a [#Specifying_the_geometry later stage]. We will come to that in a minute.

 _Note_: Currently, Inchman does not yet support dimensional parameters. Instead, reaction rates are assumed to be given in _per subvolume per second_. This requires the user to adapt model files if the number of grid cells in the model changes.

== Upload the SBML file ==
We are now ready to upload the model file to Inchman. Start Inchman by following the link to 

http://monash-inchman.appspot.com/.

The web interface provides the functionality to upload SBML files and specify the compartment geometries, species diffusivities and initial amounts, and localize reactions to compartments. The user can also change runtime parameters and finally submit the simulation to our cluster.

<img src='http://img695.imageshack.us/img695/3227/screenshottutorialuploa.png' border='0' width='700' height='450'/>

You can upload the SBML model file by going to the upper-left corner of the main screen. Before the user is allowed to go on, the model file is checked for syntactical validity. If your file is rejected, you can manually check it using the [http://sbml.org/Facilities/Validator SBML online validator] and thus get an idea about possible problems with your code.

  _Note_: After changing the local SBML file, you have to press the "Refresh" button of your browser in order to clear the server cache before uploading the new file!

== Specifying the geometry ==

<img src='http://img69.imageshack.us/img69/780/screenshottutorialgeome.png' border='0' width='700' height='450'/>

We now need to tell Inchman where the compartments are physically located. In the current version, the simulation domain is a 3-dimensional Cartesian grid divided into cuboid subvolumes (where the z-extension is only one subvolume, so effectively the simulation is 2.5 dimensional). Inchman only understands rectangular compartments which are defined by the position of the bottom-left corner and their width and height. The compartments are _declared_ in the underlying SBML model file but their geometry is _defined_ here. The reason for that dichotomy is that SBML does not understand spatially extended compartments and our main aim is to allow the user to upload existing models without changes.

 _Note_: The position and extensions of the subvolumes are given in grid coordinates. Consequently, the user most likely would want to adapt these specifications if they change the granularity of the grid.

Our model has only one compartment "World" defined which we want to span the whole simulation domain. We thus set the compartment geometry tuple to `(0,0,32,32)`.

== Setting the species parameters ==

<img src='http://img190.imageshack.us/img190/241/screenshottutorialspeci.png' border='0' width='700' height='450'/>

The `species` panel allows us to set the diffusivity (in units micrometer^2^ s^-1^) and the initial particle count per compartment for each species.

 _Note_: The given number of particles is distributed _homogeneously_ over the compartment, i.e. each subvolume of the compartment will contain exactly the same number of particles. If the total particle count cannot be divided evenly between the subvolume, rounding rules apply.

 _Note_: If compartments are overlapping, the particle number in the overlapping region will be set by the last compartment in the list. If we define, for example, a compartment "Source" with extent `(16,16,1,1)` and initial count 10000 and another compartment "World" which covers the whole domain, `(0,0,32,32)`, and initial particle count 0, the overlapping region will contain no particles. It is best to avoid overlapping compartments.

We set the diffusivity of both species to `5` and the initial amount in the "World" compartment to `10000`.

== Localizing the reactions ==
<img src='http://img805.imageshack.us/img805/8796/screenshottutorialreact.png' border='0' width='700' height='450'/>

Inchman allows the user to localize reactions to particular compartment. If a reaction cannot occur in a particular compartment, the corresponding checkbox needs to be unticked. We do not use this feature in this tutorial model.

== Running the model ==
<img src='http://img143.imageshack.us/img143/524/screenshottutorialrun.png' border='0' width='700' height='450'/>

We are now in a position to run the model. First, it is recommended to download the geometry extensions for later reuse. Later on, you can always upload the specifications using the `Upload` button.

We set the physical extension of our model to 2 micrometers and the granularity to 32 cells per dimension.

 _Note_: If you change the granularity of the simulation domain you would in most cases want to adapt the reaction rates and the compartment specifications!

In order to get a good statistical average, we perform 10 runs (the results will be automatically averaged over all runs). We want the simulation to end at 0.5 s and receive intermediate outputs each 0.1 s. We allow a maximum number of diffusion steps of 100000.

Upon hitting the `Simulate Model...` button, a window pops up asking the user to enter their e-mail address. The model will then be sent to the cluster and the user receives an email with the results (or an error message..) a little while later. Please check your spam folder if you do not get any mail.

 Internally, the SBML model file and the geometry extensions are translated into C++ source code that utilizes the GPGMP library. The project is compiled and run on our GPU cluster. A PYTHON script controls the execution, collects the results and mails them back to you.

= Analysis =

== Importing the output summary into MATLAB ==

= More examples =